# Read in (presumably noise-free) waveforms, add noise and pedestals,
# then find trigger primitives on the (now noisy) waveforms, and save
# the trigger primitives (as "Hits") to an output TTree.

# Any number of trigger primitive finders can be run: useful for
# running the same finder with multiple parameter settings, for
# example. The output of each trigger primitive finder should be
# connected to a DaqSimAna analyzer

#include "services_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "trigprim.fcl"
#include "tools_dune.fcl"

process_name: PrimSim

services: @local::dunefd_simulation_services
services.TFileService: { fileName: "TrigPrim.root" }
#services.TFileService: {}
services.TimeTracker:   {}
services.MemoryTracker:         { } # default is one
services.RandomNumberGenerator: {} #ART native random number generator
services.NuRandomService:       @local::per_event_NuRandomService  # seedservice.fcl
services.message:              @local::dune_message_services_prod
services.Geometry: @local::dune10kt_1x2x6_geo

source: {
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.

physics: {
   producers: {
      simwire: {
         module_type: "SimWireDUNE"
         SimChannelLabel: "largeant"
         NoiseOn: true
         PedestalOn: true
         DistortOn: false
         SuppressOn: false
         KeepEmptyChannels: true
         AdcSimulator:      "adcsim_ideal"
         UseRawDigitInput: true
         RawDigitInputLabel: "daq"
      }

      # You can add any number of trigger primitive finders here. Make
      # sure each one has a distinct name, and has a corresponding
      # daqsimana analyzer (otherwise you won't get a corresponding
      # TTree in the output file. Also make sure to add it to the "simulate" list below
      trigprim1000: @local::trigprimpass1
      trigprim1500: @local::trigprimpass1
      trigprim1800: @local::trigprimpass1
      trigprim2000: @local::trigprimpass1
      trigprim2500: @local::trigprimpass1
      trigprim3000: @local::trigprimpass1

trigprim3500: @local::trigprimpass1
      trigprim4000: @local::trigprimpass1
      rns: { module_type: "RandomNumberSaver" }
   }
   
   stream1:  [out1]

   simulate: [
   rns,
   simwire,
   trigprim1000,
   trigprim1500,
   trigprim1800,
   trigprim2000,
   trigprim2500,
   trigprim3000,
   trigprim3500,
   trigprim4000]
   trigger_paths: [simulate] 
   end_paths: [stream1] 

}

# Default noise configuration
# services.ChannelNoiseService.NoiseNormU: 3.16
# services.ChannelNoiseService.NoiseNormV: 3.16
# services.ChannelNoiseService.NoiseNormZ: 3.16
services.ChannelNoiseService.NoiseNormU: 0
services.ChannelNoiseService.NoiseNormV: 0
services.ChannelNoiseService.NoiseNormZ: 0

# =====================================================================
# You probably won't need to change anything below here

# Modify the settings of each of the trigger primitive finders. If you
# want to use a different trigger primitive finder class, set
# "physics.producers.<itemname>.finder.tool_type: MyNewTriggerPrimitiveFinderTool"
#physics.producers.trigprim.finder.Threshold: 1000
physics.producers.trigprim1000.finder.Threshold: 1000
physics.producers.trigprim1500.finder.Threshold: 1500
physics.producers.trigprim1800.finder.Threshold: 1800
physics.producers.trigprim2000.finder.Threshold: 2000
physics.producers.trigprim2500.finder.Threshold: 2500
physics.producers.trigprim3000.finder.Threshold: 3000
physics.producers.trigprim3500.finder.Threshold: 3500
physics.producers.trigprim4000.finder.Threshold: 4000

# DetSim services. These are used by SimWire to add noise and
# pedestals to the incoming (noise-free) waveforms
services.SimChannelExtractService: @local::scxgeneric
services.ChannelNoiseService:      @local::chnoiseold
services.PedestalAdditionService:  @local::padprovided
services.AdcDistortService:        @local::stuckbits
services.AdcSuppressService:       @local::zsnone
services.AdcCompressService:       @local::cmpreplace
services.DetPedestalService:       @local::dune_fixedpeds

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_noise_trigprim.root"
   dataTier:    "simulated"
   compressionLevel: 1
 }
}

